#! /usr/bin/env python

from genomon_intron_retention.run import *
import argparse

parser = argparse.ArgumentParser(prog = "genomon_intron_retention")

parser.add_argument("--version", action = "version", version = "genomon_intron_retention-0.2.0")

subparsers = parser.add_subparsers()

##########
# simple intron retention count 

simple_count = subparsers.add_parser("simple_count",
                                     help = "simple intron retention count program")

simple_count.add_argument("bam_file", metavar = "sequence.bam", default = None, type = str,
                          help = "the path to the bam file")

simple_count.add_argument("output_prefix", metavar = "output_prefix", default = None, type = str, 
                          help = "the prefix of the output")

simple_count.add_argument("annotation_dir", metavar = "annotation_dir", default = None, type = str,
                          help = "the path to annotation directory")

simple_count.add_argument("bedtools_path", metavar = "bedtools_path", default = None, type = str, 
                          help = "the path to bedtools")

simple_count.add_argument("-q", metavar = "mapping_qual_thres", default='20', type=int,
                          help = "threshold for mapping quality for calculating base counts")

simple_count.set_defaults(func = simple_count_main)

##########
# allele specific intron retention count

allele_count = subparsers.add_parser("allele_count",
                                     help = "intron retention count incorporating somatic mutations")

allele_count.add_argument("bam_file", metavar = "sequence.bam", default = None, type = str,
                          help = "the path to the bam file")

allele_count.add_argument("mutation_file", metavar = "mutation.txt", default = None, type = str,
                          help = "the path to the mutation list file")

allele_count.add_argument("output_file", metavar = "output.txt", default = None, type = str,
                          help = "the path to output file")

allele_count.add_argument("ref_gene_file", metavar = "refGene.txt.gz", type = str,
                          help = "refGene annotation file downloadable from UCSC site")

allele_count.add_argument("--donor_size", metavar = "donor_size", default = "2,6", type = str,
                          help = "splicing donor site size (exonic region size, intronic region size) (default: %(default)s)")

allele_count.add_argument("--acceptor_size", metavar = "acceptor_size", default = "8,1", type = str,
                          help = "splicing donor site size (intronic region size, exonic region size) (default: %(default)s)")

allele_count.add_argument("--chr_name_list", metavar = "chr_name_list.txt", default = None, type = str,
                          help = "tab delimited chr name correspondance table (e.g., 1st column: UCSC names, 2nd column: GRCh names), \
                          if need to use other than UCSC chr names")

allele_count.set_defaults(func = allele_count_main)

args = parser.parse_args()

args.func(args)

